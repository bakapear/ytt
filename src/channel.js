let { YoutubeChannel } = require('./lib/structs')
let util = require('./lib/util')
let req = require('./lib/request')

module.exports = async (channelId, opts = {}) => {
  if (typeof channelId !== 'string') throw Error('Invalid value')

  let body = await req.api('browse', { browseId: channelId, params: genToken('about') })
  if (!body || !body.contents) throw Error('Invalid channel')

  let chan = makeChannelObject(body)

  return util.removeEmpty(chan)
}

function makeChannelObject (data) {
  if (!data.microformat) {
    let header = data.header.carouselHeaderRenderer
    if (!header) throw Error('Channel type not supported')
    header = data.header.carouselHeaderRenderer.contents[1].topicChannelDetailsRenderer
    return new YoutubeChannel({
      id: data.contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.tabIdentifier,
      title: util.text(header.title),
      subscribers: util.num(header.subtitle),
      avatar: header.avatar.thumbnails
    })
  }

  let header = data.header.c4TabbedHeaderRenderer || data.header.interactiveTabbedHeaderRenderer || {}
  let meta = data.metadata?.channelMetadataRenderer || {}
  let micro = data.microformat.microformatDataRenderer
  let tabs = data.contents.twoColumnBrowseResultsRenderer.tabs
  let about = tabs.find(x => x.tabRenderer.selected).tabRenderer
    .content.sectionListRenderer.contents[0].itemSectionRenderer
    .contents[0].channelAboutFullMetadataRenderer

  let game = header.metadata ? util.text(header.metadata).split(' â€¢ ') : null

  return new YoutubeChannel({
    id: util.between(micro.urlCanonical, '/channel/'),
    legacy: meta.doubleclickTrackingUsername || util.between(meta.vanityChannelUrl, '/user/'),
    custom: util.between(meta.vanityChannelUrl, '/c/'),
    verified: !!header.badges?.some(x => x.metadataBadgeRenderer.style === 'BADGE_STYLE_TYPE_VERIFIED'),
    generated: header.autoGenerated ? true : null,
    title: util.text(header.title) || micro.title,
    description: util.text(header.description) || util.text(about.description),
    views: util.num(about.viewCountText),
    subscribers: util.num(header.subscriberCountText),
    date: util.date(about.joinedDateText),
    tags: micro.tags,
    labels: header.autoGenerated && header.badges ? header.badges.map(x => x.metadataBadgeRenderer.label) : null,
    year: game ? Number(game[0]) : null,
    devs: game ? game.slice(1) : null,
    avatar: [...meta.avatar?.thumbnails || [], ...header.avatar?.thumbnails || [], ...header.boxArt?.thumbnails || []],
    banner: header.banner ? [...header.banner.thumbnails, ...header.tvBanner?.thumbnails || [], ...header.mobileBanner?.thumbnails || []] : null
  })
}

function genToken (page) {
  if (page === 'home') page = 'featured'
  return Buffer.from([18, ...util.stb(page)]).toString('base64')
}
